# 11.
# Show the manager and number of calls received for each hour of the day on 2017-08-12

select t2.manager manager, concat(t2.shift_date,  ' ' , t1.hr ) , t1.nc
from (
select count(distinct call_ref) nc,  day(call_date) day ,  hour(call_date) hr
from Issue 
where date(call_date) = '2017-08-12'
group by day(call_date) , hour(call_date)
) as t1
inner join (
select manager , shift_date , shift_type, 
case 
when shift_type = 'Late' then '19' 
when shift_type = 'Early' then '13'
end as hr2 ,
case 
when shift_type = 'Late' then '14' 
when shift_type = 'Early' then '7'
end as hr1
from Shift
where shift_date = '2017-08-12'
) t2
on   t1.hr between t2.hr1 and t2.hr2
;


# 12
# 80/20 rule. It is said that 80% of the calls are generated by 20% of the callers. 
# Is this true? What percentage of calls are generated by the most active 20% of callers.

set @counter := 0 ;
select @counter := floor(count(distinct caller_id) * 0.2) 
from Issue ;

set @sum := 0 ;
select @sum := count(call_ref)
from Issue ;

set @x:= 0 ;
set @sum20 := 0 ;
select @sum20 := sum(t1.a) from (
select  * , @x := @x + 1 
from (
select count(call_ref) a, caller_id 
from Issue i 
group by caller_id
order by  count(call_ref) desc  
) t
where @x < @counter 
) t1;

select  round((@sum20 / @sum ) * 100 , 4) as t20pc ;


# 13
# Annoying customers. Customers who call in the last five minutes of a shift are annoying. 
# Find the most active customer who has never been annoying (and how many time they have called).

select t3.company_name , count(call_ref) 
from Issue t1 
inner join Caller t2 
on t1.caller_id=t2.caller_id  
inner join Customer t3
on t2.company_ref = t3.company_ref 
where t3.company_name not in 
(
select s3.company_name   
from (
select time(call_date) a , caller_id 
from Issue 
where time(call_date) between '13:55:00' and '14:00:00' 
or time(call_date) between '19:55:00' and '20:00:00' ) s1
inner join Caller s2
on s2.caller_id= s1.caller_id 
inner join Customer s3
on s3.company_ref= s2.company_ref
)
group by t3.company_name 
order by count(call_ref) desc 
limit 1;





